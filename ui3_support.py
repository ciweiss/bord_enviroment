#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Sep 20, 2024 03:13:55 PM CEST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import numpy as np
from utility.serial import *
import normal_vectors
import serial
import ui3
import struct

_debug = True # False to eliminate debug printing from callback functions.

def main(*args):
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , on_closing)
    # Creates a toplevel widget.
    global _top1, _w1
    global positions
    global ser_mot, connected, arm, permutation, was_reseted
    ser_mot=serial.Serial(None, 115200,timeout=None) 
    connected=False
    was_reseted=True
    positions =np.zeros(36)
    _top1 = root
    _w1 = ui3.Toplevel1(_top1)
    _w1.angle.set(45)
    _w1.com.set(20)
    r=56.5
    h=107
    r_rolle=9
    arm=normal_vectors.continuum_arm(h,r,r_rolle,12.0)
    permutation=[6,8,7,0,2,1,4,3,5]
    root.mainloop()
def on_closing():
    if connected:
        ser_mot.close()
    root.destroy()

def connect(*args):
    comport=int(_w1.com.get())
    connection="COM"+str(comport)
    ser_mot.port=connection
    ser_mot.open()
    connected=True
    print(connection, "connected")

def send_proto():
    ba=bytearray()
    for i in range(36):
        ba.extend(struct.pack("f",  positions[i]*np.pi/180.0))
        ba.extend(struct.pack("f",10))
        ba.extend(struct.pack("f",0))
        ba.extend(struct.pack("f",0))
    send_all(wrapper(ba),ser_mot)
    get_all(ser_mot)
    

def send_angle():
    listing=[]
    factor=np.pi/180
    listing.append([float(_w1.Entry2.get()),float(_w1.Entry3.get())])
    listing.append([float(_w1.Entry4.get()),float(_w1.Entry5.get())])
    listing.append([float(_w1.Entry6.get()),float(_w1.Entry7.get())])
    listing.append([float(_w1.Entry8.get()),float(_w1.Entry9.get())])
    listing.append([float(_w1.Entry10.get()),float(_w1.Entry11.get())])
    listing.append([float(_w1.Entry12.get()),float(_w1.Entry13.get())])
    listing.append([float(_w1.Entry14.get()),float(_w1.Entry15.get())])
    listing.append([float(_w1.Entry16.get()),float(_w1.Entry17.get())])
    listing.append([float(_w1.Entry18.get()),float(_w1.Entry19.get())])
    listing.append([float(_w1.Entry20.get()),float(_w1.Entry21.get())])
    listing.append([float(_w1.Entry22.get()),float(_w1.Entry23.get())])
    listing.append([float(_w1.Entry24.get()),float(_w1.Entry25.get())])
    flag=True
    for entry in listing:
        if entry[0]>20 or entry[0]<0:
            flag=False
        entry[0]*=factor
        entry[1]*=factor
    if flag:
        arm.move_to_angles(listing)    
def reset():
    for i in range(9):
        positions[i]=0
    send_proto()
    global was_reseted
    was_reseted=True

if __name__ == '__main__':
    ui3.start_up()




